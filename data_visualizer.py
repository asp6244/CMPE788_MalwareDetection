import matplotlib.pyplot as plt

colors = ['#FF0000', '#FFA500', '#0000FF', '#008000', '#FFFF00',
          '#00FFFF', '#FF00FF', '#800080', '#FFC0CB', '#008080',
          '#FF69B4', '#800000', '#00FF00']


def plot_figure(loss_list, accuracy_list, titles, x_label, figsize=(8, 8)):
    """
    show Cross Entropy Loss graph and mean per-class accuracy
    """
    plt.figure(figsize=figsize)
    plt.subplots_adjust(hspace=0.3)

    ax = plt.subplot(2, 1, 1)
    for i in range(len(loss_list)):
        test_losses = loss_list[i]
        plt.plot(range(len(test_losses[0])), test_losses[0], color=colors[i], label=test_losses[1])
    plt.xlabel(x_label)
    plt.ylabel("Cross Entropy Loss")
    plt.ylim([0, 1.1])
    plt.title(titles[0])
    if len(loss_list) > 3:
        box = ax.get_position()
        ax.set_position([box.x0, box.y0, box.width * 0.8, box.height])
        # Put a legend to the right of the current axis
        ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
    else:
        plt.legend()

    ax = plt.subplot(2, 1, 2)
    for i in range(len(accuracy_list)):
        test_acc = accuracy_list[i]
        plt.plot(range(len(test_acc[0])), test_acc[0], color=colors[i], label=test_acc[1])
    plt.xlabel(x_label)
    plt.ylabel("Mean Accuracy")
    plt.ylim([0.4, 1.0])
    plt.title(titles[1])
    if len(accuracy_list) > 3:
        box = ax.get_position()
        ax.set_position([box.x0, box.y0, box.width * 0.8, box.height])
        # Put a legend to the right of the current axis
        ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
    else:
        plt.legend()


def plot_figure_2(loss_list, accuracy_list, loss_list_2, accuracy_list_2, titles, x_label, figsize=(18, 8)):
    """
    show Cross Entropy Loss graph and mean per-class accuracy
    """
    plt.figure(figsize=figsize)
    plt.subplots_adjust(hspace=0.3)

    ax = plt.subplot(2, 2, 1)
    for i in range(len(loss_list)):
        test_losses = loss_list[i]
        plt.plot(range(len(test_losses[0])), test_losses[0], color=colors[i], label=test_losses[1])
    plt.xlabel(x_label[0])
    plt.ylabel("Cross Entropy Loss")
    plt.ylim([0, 1.1])
    plt.title(titles[0])
    if len(loss_list) > 3:
        box = ax.get_position()
        ax.set_position([box.x0, box.y0, box.width * 0.8, box.height])
        # Put a legend to the right of the current axis
        ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
    else:
        plt.legend()

    ax = plt.subplot(2, 2, 3)
    for i in range(len(accuracy_list)):
        test_acc = accuracy_list[i]
        plt.plot(range(len(test_acc[0])), test_acc[0], color=colors[i], label=test_acc[1])
    plt.xlabel(x_label[0])
    plt.ylabel("Mean Accuracy")
    plt.ylim([0.4, 1.0])
    plt.title(titles[1])
    if len(accuracy_list) > 3:
        box = ax.get_position()
        ax.set_position([box.x0, box.y0, box.width * 0.8, box.height])
        # Put a legend to the right of the current axis
        ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
    else:
        plt.legend()

    ax = plt.subplot(2, 2, 2)
    for i in range(len(loss_list_2)):
        test_losses = loss_list_2[i]
        plt.plot(range(len(test_losses[0])), test_losses[0], color=colors[i], label=test_losses[1])
    plt.xlabel(x_label[1])
    plt.ylabel("Cross Entropy Loss")
    plt.ylim([0, 1.1])
    plt.title(titles[2])
    if len(loss_list_2) > 3:
        box = ax.get_position()
        ax.set_position([box.x0, box.y0, box.width * 0.8, box.height])
        # Put a legend to the right of the current axis
        ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
    else:
        plt.legend()

    ax = plt.subplot(2, 2, 4)
    for i in range(len(accuracy_list_2)):
        test_acc = accuracy_list_2[i]
        plt.plot(range(len(test_acc[0])), test_acc[0], color=colors[i], label=test_acc[1])
    plt.xlabel(x_label[1])
    plt.ylabel("Mean Accuracy")
    plt.ylim([0.4, 1.0])
    plt.title(titles[3])
    if len(accuracy_list_2) > 3:
        box = ax.get_position()
        ax.set_position([box.x0, box.y0, box.width * 0.8, box.height])
        # Put a legend to the right of the current axis
        ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
    else:
        plt.legend()

    plt.show()
